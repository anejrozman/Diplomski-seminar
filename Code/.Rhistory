for (i in 2:length(arrivalTimes)) {
if (i %% 2 == 1){
riskGamma[i, 'cumulativeClaims'] = riskGamma[i - 1, 'cumulativeClaims'] + gammaClaims[(i-1)/2]
}
else{
riskGamma[i, 'cumulativeClaims'] = riskGamma[i - 1, 'cumulativeClaims']
}
}
riskGamma$riskProcess = riskGamma$premiumRevenue - riskGamma$cumulativeClaims
ggplot() +
geom_line(data = riskGamma,
aes(x = arrivalTimes, y = riskProcess),
size = 1,
color = "red")
ggplot() +
geom_line(data = riskGamma,
aes(x = arrivalTimes, y = riskProcess),
size = 0.3,
color = "red")
ggplot() +
geom_line(data = riskGamma,
aes(x = arrivalTimes, y = riskProcess),
size = 0.5,
color = "red")
ggplot() +
geom_line(data = riskGamma,
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = "red")
ggplot() +
geom_line(data = riskGamma,
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = "red")
ggplot() +
geom_line(data = riskGamma,
aes(x = arrivalTimes, y = riskProcess),
size = 0.3,
color = "red")
ggplot() +
geom_line(data = riskGamma,
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = "red")
gammaRiskProcess = function(lambda, T, alpha, beta, u, c) {
# Simulate arrival times
arrivalTimes = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimes = c(arrivalTimes, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimes = arrivalTimes[arrivalTimes < T]
arrivalTimes = c(arrivalTimes, T)
# Generate Gamma distributed claims
gammaClaims = rgamma(length(arrivalTimes)/2-1, shape = alpha, rate = beta)
# Simulate risk process
riskGamma = data.frame(arrivalTimes)
riskGamma$premiumRevenue = u + riskGamma$arrivalTimes*c
riskGamma$cumulativeClaims = 0
for (i in 2:length(arrivalTimes)) {
if (i %% 2 == 1) {
riskGamma[i, 'cumulativeClaims'] = riskGamma[i - 1, 'cumulativeClaims'] + gammaClaims[(i-1)/2]
} else {
riskGamma[i, 'cumulativeClaims'] = riskGamma[i - 1, 'cumulativeClaims']
}
}
riskGamma$riskProcess = riskGamma$premiumRevenue - riskGamma$cumulativeClaims
return(riskGamma)
}
a = gammaRiskProcess(lambda, T, alpha, beta, u, c)
ggplot() +
geom_line(data = a,
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = "red")
a = gammaRiskProcess(lambda, T, alpha, beta, u, c)
ggplot() +
geom_line(data = a,
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = "red")
a = gammaRiskProcess(lambda, T, alpha, beta, u, c)
ggplot() +
geom_line(data = a,
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = "red")
N = 20 # Number of simulations
vis = function(N, type){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, alpha, beta, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = rainbow(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = rainbow(N)[[i]]
)
}
}
return(p)
}
vis(N, TRUE)
vis(N, FALSE)
vis = function(N, type){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, alpha, beta, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = viridis(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = rainbow(N)[[i]]
)
}
}
return(p)
}
vis(N, TRUE)
vis = function(N, type){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, alpha, beta, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = viridis(N, option='A')[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = rainbow(N)[[i]]
)
}
}
return(p)
}
vis(N, TRUE)
vis = function(N, type){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, alpha, beta, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = magma(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = magma(N)[[i]]
)
}
}
return(p)
}
vis(N, TRUE)
magma(3)
library(ggplot2)
vis(N, TRUE)
magma(4)
library(viridis)
vis(N, TRUE)
vis = function(N, type){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, alpha, beta, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = plasma(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = plasma(N)[[i]]
)
}
}
return(p)
}
vis(N, TRUE)
vis = function(N, type){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, alpha, beta, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = cm.colors(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = cm.colors(N)[[i]]
)
}
}
return(p)
}
vis(N, TRUE)
vis = function(N, type){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, alpha, beta, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = heat(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = cm.colors(N)[[i]]
)
}
}
return(p)
}
vis(N, TRUE)
vis = function(N, type){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, alpha, beta, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = heat.colors(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = cm.colors(N)[[i]]
)
}
}
return(p)
}
vis(N, TRUE)
vis = function(N, type){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, alpha, beta, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = plasma(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = cm.colors(N)[[i]]
)
}
}
return(p)
}
vis(N, TRUE)
vis = function(N, type, lambda, T, scale, shape, u, c){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = plasma(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = cm.colors(N)[[i]]
)
}
}
p = p + labs(title = "simulacija",
x = "Čas (t)",
y = "Proces tveganja (U(t))") +
scale_size_identity()
return(p)
}
vis(N, TRUE, 0.1, 365, 10000, 2, 10000, 500)
vis(N, TRUE, 0.1, 365, 10000, 2, 10000, 800)
vis(N, TRUE, 0.1, 365, 10000, 2, 10000, 700)
vis(N, TRUE, 0.1, 365, 10000, 2, 10000, 650)
vis = function(N, type, lambda, T, scale, shape, u, c){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = plasma(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = cm.colors(N)[[i]]
)
}
}
p = p + labs(title = "simulacija",
x = "Čas t",
y = "Proces tveganja U(t)") +
scale_size_identity()
return(p)
}
vis(N, TRUE, 0.1, 365, 10000, 2, 10000, 650)
vis = function(N, type, lambda, T, scale, shape, u, c){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = plasma(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = cm.colors(N)[[i]]
)
}
}
p = p + labs(title = "simulacija",
x = "Čas t",
y = "Proces tveganja U(t)") #+
#scale_size_identity()
return(p)
}
vis(N, TRUE, 0.1, 365, 10000, 2, 10000, 650)
vis(N, TRUE, 0.1, 365, 10000, 2, 10000, 650)
vis(N, FALSE, 0.1, 365, 10000, 2, 10000, 650)
ParetoRiskProcess = function(lambda, T, scale, shape, u, c) {
# Simulate arrival times
arrivalTimes = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimes = c(arrivalTimes, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimes = arrivalTimes[arrivalTimes < T]
arrivalTimes = c(arrivalTimes, T)
# Generate Pareto distributed claims
paretoClaims = rpareto(length(arrivalTimes)/2-1, scale, shape)
# Simulate risk process
riskPareto = data.frame(arrivalTimes)
riskPareto$premiumRevenue = u + riskPareto$arrivalTimes*c
riskPareto$cumulativeClaims = 0
for (i in 2:length(arrivalTimes)) {
if (i %% 2 == 1) {
riskPareto[i, 'cumulativeClaims'] = riskPareto[i-1, 'cumulativeClaims'] + paretoClaims[(i-1)/2]
} else {
riskPareto[i, 'cumulativeClaims'] = riskPareto[i-1, 'cumulativeClaims']
}
}
riskPareto$riskProcess = riskPareto$premiumRevenue - riskPareto$cumulativeClaims
return(riskPareto[, c('arrivalTimes', 'riskProcess')])
}
vis(N, FALSE, 0.1, 365, 10000, 2, 10000, 650)
# Parameters
lambda = 0.1 # Intensity of HPP
T = 365 # Time horizon of simulation
scale = 5000
shape = 2
u = 10000 # Initial reserve
c = 1000 # Premium income rate
ParetoRiskProcess = function(lambda, T, scale, shape, u, c) {
# Simulate arrival times
arrivalTimes = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimes = c(arrivalTimes, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimes = arrivalTimes[arrivalTimes < T]
arrivalTimes = c(arrivalTimes, T)
# Generate Pareto distributed claims
paretoClaims = rpareto(length(arrivalTimes)/2-1, scale, shape)
# Simulate risk process
riskPareto = data.frame(arrivalTimes)
riskPareto$premiumRevenue = u + riskPareto$arrivalTimes*c
riskPareto$cumulativeClaims = 0
for (i in 2:length(arrivalTimes)) {
if (i %% 2 == 1) {
riskPareto[i, 'cumulativeClaims'] = riskPareto[i-1, 'cumulativeClaims'] + paretoClaims[(i-1)/2]
} else {
riskPareto[i, 'cumulativeClaims'] = riskPareto[i-1, 'cumulativeClaims']
}
}
riskPareto$riskProcess = riskPareto$premiumRevenue - riskPareto$cumulativeClaims
return(riskPareto[, c('arrivalTimes', 'riskProcess')])
}
ParetoRiskProcess(lambda, T, scale, shape, u, c)
vis = function(N, type, lambda, T, scale, shape, u, c){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = plasma(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = cm.colors(N)[[i]]
)
}
}
p = p + labs(title = "simulacija",
x = "Čas t",
y = "Proces tveganja U(t)") #+
#scale_size_identity()
return(p)
}
vis(N, FALSE, 0.1, 365, scale, shape, 10000, 650)
vis = function(N, type, lambda, T, scale, shape, u, c){
# Initialize plot
p = ggplot()
# Plot gamma or Pareto risk processes
for (i in 1:N){
if (type){
p = p + geom_line(data = gammaRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = plasma(N)[[i]]
)
}
else{
p = p + geom_line(data = ParetoRiskProcess(lambda, T, scale, shape, u, c),
aes(x = arrivalTimes, y = riskProcess),
size = 0.4,
color = plasma(N)[[i]]
)
}
}
p = p + labs(title = "simulacija",
x = "Čas t",
y = "Proces tveganja U(t)") #+
#scale_size_identity()
return(p)
}
vis(N, FALSE, 0.1, 365, scale, shape, 10000, 650)
vis(N, FALSE, 0.1, 365, scale, shape, 10000, 0)
vis(N, FALSE, 0.1, 365, scale, shape, 10000, 500)
