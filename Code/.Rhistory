riskWeibullHeavy$riskProcess = riskWeibullHeavy$premiumRevenue - riskWeibullHeavy$cumulativeClaims
for (i in 1:nrow(riskWeibullHeavy)){
if (riskWeibullHeavy$riskProcess[i] < 0){
riskWeibullHeavy[i,4] = 0
riskWeibullHeavy = riskWeibullHeavy[1:i,]
break
}
}
# Simulation of risk processes
g2riskProcess = ggplot()
g2riskProcess = g2riskProcess + geom_line(data = riskWeibullLight,
aes(x = arrivalTimesLight, y = riskProcess),
size = 0.7,
color = 'red') +
geom_line(data = riskWeibullHeavy,
aes(x = arrivalTimesHeavy, y = riskProcess),
size = 0.7,
color = 'cyan3') +
geom_point(aes(x =riskWeibullLight[nrow(riskWeibullLight), 1], y = -0.8),
size = 2.5,
shape = "x",
color = "black") +
labs(title = "realizacija procesa tveganja z Weibullovo porazdeljenimi zahtevki",
x = "Čas t",
y = "Proces tveganja U(t)")
g2riskProcess
# Light
lightDensity = data.frame(x=1:1000, y=dweibull(1:1000, aLight, bLight))
g2lightDensity = ggplot() + geom_line(data = lightDensity,
aes(x, y),
size = 0.7,
color = 'red') +
labs(title = 'Gostota weibullove slucajne spremenljvke',
x = 'x',
y = 'f_X(x)')
g2lightDensity
# Heavy
heavyDensity = data.frame(x=1:1000, y=dweibull(1:1000, aHeavy, bHeavy))
g2heavyDensity = ggplot() + geom_line(data = heavyDensity,
aes(x, y),
size = 0.7,
color = 'cyan3') +
labs(title = 'Gostota weibullove slucajne spremenljvke',
x = 'x',
y = 'f_X(x)')
g2heavyDensity
# Combine plots
g2 = grid.arrange(g2lightDensity, g2heavyDensity, ncol = 2)
g2 = grid.arrange(g2, g2riskProcess, heights = c(3.5, 6.5))
g2
set.seed(3)
# Parameters
lambda = 0.3 # Intensity of HPP
T = 3000 # Time horizon of simulation
u = 500 # Initial reserve
c = 10 # Premium income rate
# Light tailed Weibull
aLight = 2 # Shape
bLight = 100 # Rate
# Simulate arrival times for light tails
arrivalTimesLight = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimesLight = c(arrivalTimesLight, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimesLight = arrivalTimesLight[arrivalTimesLight < T]
arrivalTimesLight = c(arrivalTimesLight, T)
# Generate claims
lightClaims = rweibull(length(arrivalTimesLight)/2-1, aLight, bLight)
# Simulate risk process
riskWeibullLight = data.frame(arrivalTimesLight)
riskWeibullLight$premiumRevenue = u + riskWeibullLight$arrivalTimesLight*c
riskWeibullLight$cumulativeClaims = 0
for (i in 2:length(arrivalTimesLight)) {
if (i %% 2 == 1) {
riskWeibullLight[i, 'cumulativeClaims'] = riskWeibullLight[i-1, 'cumulativeClaims'] + lightClaims[(i-1)/2]
} else {
riskWeibullLight[i, 'cumulativeClaims'] = riskWeibullLight[i-1, 'cumulativeClaims']
}
}
riskWeibullLight$riskProcess = riskWeibullLight$premiumRevenue - riskWeibullLight$cumulativeClaims
for (i in 1:nrow(riskWeibullLight)){
if (riskWeibullLight$riskProcess[i] < 0){
riskWeibullLight[i,4] = 0
riskWeibullLight = riskWeibullLight[1:i,]
break
}
}
# Heavy tailed Weibull
aHeavy = 0.5 # Shape
bHeavy = 29.54 # Rate
# Simulate arrival times for heavy tails
arrivalTimesHeavy = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimesHeavy = c(arrivalTimesHeavy, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimesHeavy = arrivalTimesHeavy[arrivalTimesHeavy < T]
arrivalTimesHeavy = c(arrivalTimesHeavy, T)
# Generate claims
heavyClaims = rweibull(length(arrivalTimesHeavy)/2-1, aHeavy, bHeavy)
# Simulate risk process
riskWeibullHeavy = data.frame(arrivalTimesHeavy)
riskWeibullHeavy$premiumRevenue = u + riskWeibullHeavy$arrivalTimesHeavy*c
riskWeibullHeavy$cumulativeClaims = 0
for (i in 2:length(arrivalTimesHeavy)) {
if (i %% 2 == 1) {
riskWeibullHeavy[i, 'cumulativeClaims'] = riskWeibullHeavy[i-1, 'cumulativeClaims'] + heavyClaims[(i-1)/2]
} else {
riskWeibullHeavy[i, 'cumulativeClaims'] = riskWeibullHeavy[i-1, 'cumulativeClaims']
}
}
riskWeibullHeavy$riskProcess = riskWeibullHeavy$premiumRevenue - riskWeibullHeavy$cumulativeClaims
for (i in 1:nrow(riskWeibullHeavy)){
if (riskWeibullHeavy$riskProcess[i] < 0){
riskWeibullHeavy[i,4] = 0
riskWeibullHeavy = riskWeibullHeavy[1:i,]
break
}
}
# Simulation of risk processes
g2riskProcess = ggplot()
g2riskProcess = g2riskProcess + geom_line(data = riskWeibullLight,
aes(x = arrivalTimesLight, y = riskProcess),
size = 0.7,
color = 'red') +
geom_line(data = riskWeibullHeavy,
aes(x = arrivalTimesHeavy, y = riskProcess),
size = 0.7,
color = 'cyan3') +
geom_point(aes(x =riskWeibullLight[nrow(riskWeibullLight), 1], y = -0.8),
size = 2.5,
shape = "x",
color = "black") +
labs(title = "realizacija procesa tveganja z Weibullovo porazdeljenimi zahtevki",
x = "Čas t",
y = "Proces tveganja U(t)")
g2riskProcess
# Light
lightDensity = data.frame(x=1:1000, y=dweibull(1:1000, aLight, bLight))
g2lightDensity = ggplot() + geom_line(data = lightDensity,
aes(x, y),
size = 0.7,
color = 'red') +
labs(title = 'Gostota weibullove slucajne spremenljvke',
x = 'x',
y = 'f_X(x)')
g2lightDensity
# Heavy
heavyDensity = data.frame(x=1:1000, y=dweibull(1:1000, aHeavy, bHeavy))
g2heavyDensity = ggplot() + geom_line(data = heavyDensity,
aes(x, y),
size = 0.7,
color = 'cyan3') +
labs(title = 'Gostota weibullove slucajne spremenljvke',
x = 'x',
y = 'f_X(x)')
g2heavyDensity
# Combine plots
g2 = grid.arrange(g2lightDensity, g2heavyDensity, ncol = 2)
g2 = grid.arrange(g2, g2riskProcess, heights = c(3.5, 6.5))
g2
set.seed(3)
# Parameters
lambda = 0.2 # Intensity of HPP
T = 3000 # Time horizon of simulation
u = 2000 # Initial reserve
c = 10 # Premium income rate
# Light tailed Weibull
aLight = 2 # Shape
bLight = 100 # Rate
# Simulate arrival times for light tails
arrivalTimesLight = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimesLight = c(arrivalTimesLight, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimesLight = arrivalTimesLight[arrivalTimesLight < T]
arrivalTimesLight = c(arrivalTimesLight, T)
# Generate claims
lightClaims = rweibull(length(arrivalTimesLight)/2-1, aLight, bLight)
# Simulate risk process
riskWeibullLight = data.frame(arrivalTimesLight)
riskWeibullLight$premiumRevenue = u + riskWeibullLight$arrivalTimesLight*c
riskWeibullLight$cumulativeClaims = 0
for (i in 2:length(arrivalTimesLight)) {
if (i %% 2 == 1) {
riskWeibullLight[i, 'cumulativeClaims'] = riskWeibullLight[i-1, 'cumulativeClaims'] + lightClaims[(i-1)/2]
} else {
riskWeibullLight[i, 'cumulativeClaims'] = riskWeibullLight[i-1, 'cumulativeClaims']
}
}
riskWeibullLight$riskProcess = riskWeibullLight$premiumRevenue - riskWeibullLight$cumulativeClaims
for (i in 1:nrow(riskWeibullLight)){
if (riskWeibullLight$riskProcess[i] < 0){
riskWeibullLight[i,4] = 0
riskWeibullLight = riskWeibullLight[1:i,]
break
}
}
# Heavy tailed Weibull
aHeavy = 0.5 # Shape
bHeavy = 29.54 # Rate
# Simulate arrival times for heavy tails
arrivalTimesHeavy = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimesHeavy = c(arrivalTimesHeavy, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimesHeavy = arrivalTimesHeavy[arrivalTimesHeavy < T]
arrivalTimesHeavy = c(arrivalTimesHeavy, T)
# Generate claims
heavyClaims = rweibull(length(arrivalTimesHeavy)/2-1, aHeavy, bHeavy)
# Simulate risk process
riskWeibullHeavy = data.frame(arrivalTimesHeavy)
riskWeibullHeavy$premiumRevenue = u + riskWeibullHeavy$arrivalTimesHeavy*c
riskWeibullHeavy$cumulativeClaims = 0
for (i in 2:length(arrivalTimesHeavy)) {
if (i %% 2 == 1) {
riskWeibullHeavy[i, 'cumulativeClaims'] = riskWeibullHeavy[i-1, 'cumulativeClaims'] + heavyClaims[(i-1)/2]
} else {
riskWeibullHeavy[i, 'cumulativeClaims'] = riskWeibullHeavy[i-1, 'cumulativeClaims']
}
}
riskWeibullHeavy$riskProcess = riskWeibullHeavy$premiumRevenue - riskWeibullHeavy$cumulativeClaims
for (i in 1:nrow(riskWeibullHeavy)){
if (riskWeibullHeavy$riskProcess[i] < 0){
riskWeibullHeavy[i,4] = 0
riskWeibullHeavy = riskWeibullHeavy[1:i,]
break
}
}
# Simulation of risk processes
g2riskProcess = ggplot()
g2riskProcess = g2riskProcess + geom_line(data = riskWeibullLight,
aes(x = arrivalTimesLight, y = riskProcess),
size = 0.7,
color = 'red') +
geom_line(data = riskWeibullHeavy,
aes(x = arrivalTimesHeavy, y = riskProcess),
size = 0.7,
color = 'cyan3') +
geom_point(aes(x =riskWeibullLight[nrow(riskWeibullLight), 1], y = -0.8),
size = 2.5,
shape = "x",
color = "black") +
labs(title = "realizacija procesa tveganja z Weibullovo porazdeljenimi zahtevki",
x = "Čas t",
y = "Proces tveganja U(t)")
g2riskProcess
# Light
lightDensity = data.frame(x=1:1000, y=dweibull(1:1000, aLight, bLight))
g2lightDensity = ggplot() + geom_line(data = lightDensity,
aes(x, y),
size = 0.7,
color = 'red') +
labs(title = 'Gostota weibullove slucajne spremenljvke',
x = 'x',
y = 'f_X(x)')
g2lightDensity
# Heavy
heavyDensity = data.frame(x=1:1000, y=dweibull(1:1000, aHeavy, bHeavy))
g2heavyDensity = ggplot() + geom_line(data = heavyDensity,
aes(x, y),
size = 0.7,
color = 'cyan3') +
labs(title = 'Gostota weibullove slucajne spremenljvke',
x = 'x',
y = 'f_X(x)')
g2heavyDensity
# Combine plots
g2 = grid.arrange(g2lightDensity, g2heavyDensity, ncol = 2)
g2 = grid.arrange(g2, g2riskProcess, heights = c(3.5, 6.5))
g2
c = 30 # Premium income rate
# Light tailed Weibull
aLight = 2 # Shape
bLight = 100 # Rate
# Simulate arrival times for light tails
arrivalTimesLight = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimesLight = c(arrivalTimesLight, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimesLight = arrivalTimesLight[arrivalTimesLight < T]
arrivalTimesLight = c(arrivalTimesLight, T)
# Generate claims
lightClaims = rweibull(length(arrivalTimesLight)/2-1, aLight, bLight)
# Simulate risk process
riskWeibullLight = data.frame(arrivalTimesLight)
riskWeibullLight$premiumRevenue = u + riskWeibullLight$arrivalTimesLight*c
riskWeibullLight$cumulativeClaims = 0
for (i in 2:length(arrivalTimesLight)) {
if (i %% 2 == 1) {
riskWeibullLight[i, 'cumulativeClaims'] = riskWeibullLight[i-1, 'cumulativeClaims'] + lightClaims[(i-1)/2]
} else {
riskWeibullLight[i, 'cumulativeClaims'] = riskWeibullLight[i-1, 'cumulativeClaims']
}
}
riskWeibullLight$riskProcess = riskWeibullLight$premiumRevenue - riskWeibullLight$cumulativeClaims
for (i in 1:nrow(riskWeibullLight)){
if (riskWeibullLight$riskProcess[i] < 0){
riskWeibullLight[i,4] = 0
riskWeibullLight = riskWeibullLight[1:i,]
break
}
}
# Heavy tailed Weibull
aHeavy = 0.5 # Shape
bHeavy = 29.54 # Rate
# Simulate arrival times for heavy tails
arrivalTimesHeavy = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimesHeavy = c(arrivalTimesHeavy, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimesHeavy = arrivalTimesHeavy[arrivalTimesHeavy < T]
arrivalTimesHeavy = c(arrivalTimesHeavy, T)
# Generate claims
heavyClaims = rweibull(length(arrivalTimesHeavy)/2-1, aHeavy, bHeavy)
# Simulate risk process
riskWeibullHeavy = data.frame(arrivalTimesHeavy)
riskWeibullHeavy$premiumRevenue = u + riskWeibullHeavy$arrivalTimesHeavy*c
riskWeibullHeavy$cumulativeClaims = 0
for (i in 2:length(arrivalTimesHeavy)) {
if (i %% 2 == 1) {
riskWeibullHeavy[i, 'cumulativeClaims'] = riskWeibullHeavy[i-1, 'cumulativeClaims'] + heavyClaims[(i-1)/2]
} else {
riskWeibullHeavy[i, 'cumulativeClaims'] = riskWeibullHeavy[i-1, 'cumulativeClaims']
}
}
riskWeibullHeavy$riskProcess = riskWeibullHeavy$premiumRevenue - riskWeibullHeavy$cumulativeClaims
for (i in 1:nrow(riskWeibullHeavy)){
if (riskWeibullHeavy$riskProcess[i] < 0){
riskWeibullHeavy[i,4] = 0
riskWeibullHeavy = riskWeibullHeavy[1:i,]
break
}
}
# Simulation of risk processes
g2riskProcess = ggplot()
g2riskProcess = g2riskProcess + geom_line(data = riskWeibullLight,
aes(x = arrivalTimesLight, y = riskProcess),
size = 0.7,
color = 'red') +
geom_line(data = riskWeibullHeavy,
aes(x = arrivalTimesHeavy, y = riskProcess),
size = 0.7,
color = 'cyan3') +
geom_point(aes(x =riskWeibullLight[nrow(riskWeibullLight), 1], y = -0.8),
size = 2.5,
shape = "x",
color = "black") +
labs(title = "realizacija procesa tveganja z Weibullovo porazdeljenimi zahtevki",
x = "Čas t",
y = "Proces tveganja U(t)")
g2riskProcess
# Light
lightDensity = data.frame(x=1:1000, y=dweibull(1:1000, aLight, bLight))
g2lightDensity = ggplot() + geom_line(data = lightDensity,
aes(x, y),
size = 0.7,
color = 'red') +
labs(title = 'Gostota weibullove slucajne spremenljvke',
x = 'x',
y = 'f_X(x)')
g2lightDensity
# Heavy
heavyDensity = data.frame(x=1:1000, y=dweibull(1:1000, aHeavy, bHeavy))
g2heavyDensity = ggplot() + geom_line(data = heavyDensity,
aes(x, y),
size = 0.7,
color = 'cyan3') +
labs(title = 'Gostota weibullove slucajne spremenljvke',
x = 'x',
y = 'f_X(x)')
g2heavyDensity
# Combine plots
g2 = grid.arrange(g2lightDensity, g2heavyDensity, ncol = 2)
g2 = grid.arrange(g2, g2riskProcess, heights = c(3.5, 6.5))
g2
c = 15 # Premium income rate
# Light tailed Weibull
aLight = 2 # Shape
bLight = 100 # Rate
# Simulate arrival times for light tails
arrivalTimesLight = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimesLight = c(arrivalTimesLight, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimesLight = arrivalTimesLight[arrivalTimesLight < T]
arrivalTimesLight = c(arrivalTimesLight, T)
# Generate claims
lightClaims = rweibull(length(arrivalTimesLight)/2-1, aLight, bLight)
# Simulate risk process
riskWeibullLight = data.frame(arrivalTimesLight)
riskWeibullLight$premiumRevenue = u + riskWeibullLight$arrivalTimesLight*c
riskWeibullLight$cumulativeClaims = 0
for (i in 2:length(arrivalTimesLight)) {
if (i %% 2 == 1) {
riskWeibullLight[i, 'cumulativeClaims'] = riskWeibullLight[i-1, 'cumulativeClaims'] + lightClaims[(i-1)/2]
} else {
riskWeibullLight[i, 'cumulativeClaims'] = riskWeibullLight[i-1, 'cumulativeClaims']
}
}
riskWeibullLight$riskProcess = riskWeibullLight$premiumRevenue - riskWeibullLight$cumulativeClaims
for (i in 1:nrow(riskWeibullLight)){
if (riskWeibullLight$riskProcess[i] < 0){
riskWeibullLight[i,4] = 0
riskWeibullLight = riskWeibullLight[1:i,]
break
}
}
# Heavy tailed Weibull
aHeavy = 0.5 # Shape
bHeavy = 29.54 # Rate
# Simulate arrival times for heavy tails
arrivalTimesHeavy = c(0)
t = 0
while (t <= T) {
interarrivalTime = rexp(1, rate = lambda)
t = t + interarrivalTime
arrivalTimesHeavy = c(arrivalTimesHeavy, t, t)
}
# Remove the last arrival time exceeding T and add T
arrivalTimesHeavy = arrivalTimesHeavy[arrivalTimesHeavy < T]
arrivalTimesHeavy = c(arrivalTimesHeavy, T)
# Generate claims
heavyClaims = rweibull(length(arrivalTimesHeavy)/2-1, aHeavy, bHeavy)
# Simulate risk process
riskWeibullHeavy = data.frame(arrivalTimesHeavy)
riskWeibullHeavy$premiumRevenue = u + riskWeibullHeavy$arrivalTimesHeavy*c
riskWeibullHeavy$cumulativeClaims = 0
for (i in 2:length(arrivalTimesHeavy)) {
if (i %% 2 == 1) {
riskWeibullHeavy[i, 'cumulativeClaims'] = riskWeibullHeavy[i-1, 'cumulativeClaims'] + heavyClaims[(i-1)/2]
} else {
riskWeibullHeavy[i, 'cumulativeClaims'] = riskWeibullHeavy[i-1, 'cumulativeClaims']
}
}
riskWeibullHeavy$riskProcess = riskWeibullHeavy$premiumRevenue - riskWeibullHeavy$cumulativeClaims
for (i in 1:nrow(riskWeibullHeavy)){
if (riskWeibullHeavy$riskProcess[i] < 0){
riskWeibullHeavy[i,4] = 0
riskWeibullHeavy = riskWeibullHeavy[1:i,]
break
}
}
# Simulation of risk processes
g2riskProcess = ggplot()
g2riskProcess = g2riskProcess + geom_line(data = riskWeibullLight,
aes(x = arrivalTimesLight, y = riskProcess),
size = 0.7,
color = 'red') +
geom_line(data = riskWeibullHeavy,
aes(x = arrivalTimesHeavy, y = riskProcess),
size = 0.7,
color = 'cyan3') +
geom_point(aes(x =riskWeibullLight[nrow(riskWeibullLight), 1], y = -0.8),
size = 2.5,
shape = "x",
color = "black") +
labs(title = "realizacija procesa tveganja z Weibullovo porazdeljenimi zahtevki",
x = "Čas t",
y = "Proces tveganja U(t)")
g2riskProcess
# Light
lightDensity = data.frame(x=1:1000, y=dweibull(1:1000, aLight, bLight))
g2lightDensity = ggplot() + geom_line(data = lightDensity,
aes(x, y),
size = 0.7,
color = 'red') +
labs(title = 'Gostota weibullove slucajne spremenljvke',
x = 'x',
y = 'f_X(x)')
g2lightDensity
# Heavy
heavyDensity = data.frame(x=1:1000, y=dweibull(1:1000, aHeavy, bHeavy))
g2heavyDensity = ggplot() + geom_line(data = heavyDensity,
aes(x, y),
size = 0.7,
color = 'cyan3') +
labs(title = 'Gostota weibullove slucajne spremenljvke',
x = 'x',
y = 'f_X(x)')
g2heavyDensity
# Combine plots
g2 = grid.arrange(g2lightDensity, g2heavyDensity, ncol = 2)
g2 = grid.arrange(g2, g2riskProcess, heights = c(3.5, 6.5))
g2
